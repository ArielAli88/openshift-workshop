apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: blog
  template: blog
message: |-
  Se creara el siguiente servicio al ejecutar este template $NAME
metadata:
  annotations:
    description: Template para deploy de aplicacion de ejemplo para Workshop de Openshift.
    openshift.io/display-name: Aplicacion ejemplo para deploy sobre Openshift .
    openshift.io/documentation-url: https://github.com/gonzaloacosta/workshop-openshift
    openshift.io/long-description: Este template tiene la definicion de todos los recursos
      necesarios para que el desarrollador necesite. Despliega un buildconfig, deploymentconfig
      service, route, imagestreams.
    openshift.io/provider-display-name: Semperti
    openshift.io/support-url: devops@semperti.com
  labels:
    samples.operator.openshift.io/managed: "true"
  name: blog
  namespace: openshift
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${NAME}
  stringData:
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}",
        "kind": "Service"}]'
    name: ${NAME}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAME}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - env:
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}
          image: ' '
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: blog
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - blog
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange
parameters:
- description: Nombre de la aplicacion que vamos a desplegar.
  displayName: Name
  name: NAME
  required: true
  value: blog
 - description: Proyecto donde vamos a desplegar la aplicacion.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Version of Python image to be used (3.6 or latest).
  displayName: Version of Python Image
  name: PYTHON_VERSION
  required: true
  value: "3.6"
- description: Limite maximo de memoria que puede consumir el deploy.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Dominio de aplicacion con el que sera expuesta la aplicacion.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- displayName: Database Username
  name: DATABASE_USER
  required: true
  value: django
- displayName: Database User Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
